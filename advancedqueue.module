<?php

/**
 * @file
 * Helper module for advanced queuing.
 */

/**
 * Status indicating item was added to the queue.
 */
define('ADVANCEDQUEUE_STATUS_QUEUED', -1);

/**
 * Status indicating item is currently being processed.
 */
define('ADVANCEDQUEUE_STATUS_PROCESSING', 0);

/**
 * Status indicating item was processed successfuly.
 */
define('ADVANCEDQUEUE_STATUS_SUCCESS', 1);

/**
 * Status indicating item processing failed.
 */
define('ADVANCEDQUEUE_STATUS_FAILURE', 2);

/**
 * Implements hook_views_api().
 */
function advancedqueue_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'advancedqueue') . '/views',
  );
}

/**
 * Implements hook_advancedqueue_entity_info().
 */
function advancedqueue_entity_info() {
  $entity_info['advancedqueue_item'] = array(
    'label' => t('Advanced queue item'),
    'controller class' => 'DrupalDefaultEntityController',
    'base table' => 'advancedqueue',
    'module' => 'advancedqueue',
    'entity keys' => array(
      'id' => 'item_id',
    ),
  );
  return $entity_info;
}

/**
 * Implements hook_cron().
 */
function advancedqueue_cron() {
  if (!$queue_names = variable_get('advancedqueue_use_cron', array())) {
    return;
  }

  if (!$queues = advancedqueue_get_queues_info($queue_names)) {
    return;
  }

  $end = time() + 60;
  foreach ($queues as $queue_name => $queue_info) {
    $queue = DrupalQueue::get($queue_name);

    while ($item = $queue->claimItem()) {
      if (time() > $end) {
        // We've reached max execution time.
        return;
      }
      drush_advancedqueue_process_item($queue, $queue_name, $queue_info, $item, $end);
    }
  }
}

/**
 * Return queue(s) info.
 *
 * @params $queue_names
 *   Optional; Array with the queue names. If empty, return all the queues.
 */
function advancedqueue_get_queues_info($queue_names = array()) {
  $queues_info = &drupal_static(__FUNCTION__, array());

  if (empty($queues_info)) {
    $queues_info = module_invoke_all('advanced_queue_info');
    drupal_alter('advanced_queue_info', $queues_info);
  }

  if ($queue_names) {
    return array_intersect_key($queues_info, $queue_names);
  }

  return $queues_info;
}